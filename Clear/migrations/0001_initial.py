# Generated by Django 3.2.9 on 2022-12-30 10:27

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Inhaler',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=12)),
                ('low_dose', models.IntegerField()),
                ('low_puffs', models.IntegerField()),
                ('low_frequency', models.IntegerField()),
                ('med_dose', models.IntegerField()),
                ('med_puffs', models.IntegerField()),
                ('med_frequency', models.IntegerField()),
                ('hi_dose', models.IntegerField()),
                ('hi_puffs', models.IntegerField()),
                ('hi_frequency', models.IntegerField()),
            ],
            options={
                'verbose_name': 'Inhaler',
                'verbose_name_plural': 'Inhalers',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('postcode', models.CharField(max_length=12)),
                ('name', models.CharField(max_length=128)),
            ],
            options={
                'verbose_name': 'Location',
                'verbose_name_plural': 'Locations',
                'ordering': ['postcode'],
            },
        ),
        migrations.CreateModel(
            name='PollutionLevelInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('band', models.CharField(max_length=6)),
                ('lower_bound', models.IntegerField()),
                ('upper_bound', models.IntegerField()),
                ('general_description', models.CharField(max_length=512)),
                ('risk_description', models.CharField(max_length=512)),
            ],
            options={
                'verbose_name': 'Pollution Level Info',
                'verbose_name_plural': 'Pollution Level Info',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='AppUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('dob', models.DateField(default=datetime.date.today)),
                ('pollution_limit', models.IntegerField()),
                ('consent', models.BooleanField()),
                ('current_location', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='current_users', to='Clear.location')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'App User',
                'verbose_name_plural': 'App Users',
                'ordering': ['id'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserLocations',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location_type', models.CharField(choices=[('home', 'Home'), ('work', 'Work'), ('other', 'Other')], max_length=5)),
                ('location_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='users_location', to='Clear.location')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='locations_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Location',
                'verbose_name_plural': 'User Locations',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='UserInhaler',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('puffs_today', models.IntegerField(default=0)),
                ('puffs_remaining', models.IntegerField()),
                ('dose', models.IntegerField(help_text='Dose in micrograms')),
                ('puffs', models.IntegerField(help_text='Number of puffs per usage')),
                ('frequency', models.IntegerField(help_text='Number of uses per day')),
                ('inhaler_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='users_inhaler', to='Clear.inhaler')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inhalers_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Inhaler',
                'verbose_name_plural': 'Users Inhalers',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='PollutionLevels',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pollution_level', models.IntegerField()),
                ('pollution_date', models.DateField(default=datetime.date.today)),
                ('current_flag', models.BooleanField(default=True)),
                ('location_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='location_pollution', to='Clear.location')),
            ],
            options={
                'verbose_name': 'Pollution Levels',
                'verbose_name_plural': 'Pollution Levels',
                'ordering': ['location_id'],
            },
        ),
    ]
